<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                    http://www.springframework.org/schema/aop
	                    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	                    http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	 <!--设置需要加载并读取的数据库连接池属性文件的位置  -->
	 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	       <list>
	         <value>classpath*:proxool_mysql.properties</value>
	       </list>
	    </property>
	 </bean>
	 
	<!-- 设置Proxool数据库连接池 -->
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
	    <!-- 数据库连接池别名 -->
	    <property name="alias" value="${jdbc.alias}"/>
	    <property name="user" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
	    <!-- 数据库连接驱动 -->
	    <property name="driver" value="${jdbc.driverClassName}"/>
	    <!-- 数据库连接字符串 -->
	    <property name="driverUrl" value="${jdbc.url}"/>
	    <!-- 设置数据库连接池中存在的空闲连接池数量-->
	    <property name="prototypeCount" value="${jdbc.prototypeCount}"/>
	    <!--  设置数据库连接池中可拥有的最大连接个数-->
	    <property name="maximumConnectionCount" value="${jdbc.maximumConnectionCount}"/>
	    <!--  设置数据库连接池中可拥有的最小连接个数-->
	    <property name="minimumConnectionCount" value="${jdbc.minimumConnectionCount}"/>
	</bean>
	<!-- 对hibernate中的sessionFactory进行托管 -->                    
    <bean name="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
       <!-- 在spring中设置hibernate核心配置文件，便于spring托管 -->
       <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
       <!-- 将proxool数据库连接池注入到 LocalSessionFactoryBean类中-->
       <property name="dataSource">
         <ref bean="dataSource"/>
       </property>
    </bean>
    <!-- 设置spring框架中的hibernate事务管理对象 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
       <!-- 将sessionFactory注入到该事务中 -->
       <property name="sessionFactory">
         <ref bean="sessionFactory"/>
       </property>
    </bean>
    <!-- 设置spring框架中的事务通知   -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
       <!-- 设置哪些方法可以通过事务管理器控制 -->
       <tx:attributes>
           <tx:method name="insert" propagation="REQUIRED"/>
           <tx:method name="selectAll" read-only="true"/>
           <tx:method name="delete" propagation="REQUIRED"/>
           <tx:method name="update" propagation="REQUIRED"/>
       </tx:attributes>
    </tx:advice>
    <!-- 设置AOP切面对象模块 -->
    <aop:config>
       <!-- 设置切入点pointcut -->
       <aop:pointcut expression="execution(* com.leo.ssh.base.dao.impl.*.*(..))" id="pointcut"/>
       <!-- 设置事务通知环绕及切入点 -->
       <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>
	<bean name="commodity" class="com.leo.ssh.domain.Commodity"/>
	<bean name="commodityclass" class="com.leo.ssh.domain.Commodityclass"/>
	<bean name="bigcommodityclass" class="com.leo.ssh.domain.Bigcommodityclass"/>
	<bean name="admins" class="com.leo.ssh.domain.Admins"/>
	<bean name="users" class="com.leo.ssh.domain.Users"/>
	<bean name="adminroles" class="com.leo.ssh.domain.Adminroles"/>
	<bean name="cart" class="com.leo.ssh.tools.Cart"/>
	<bean name="order" class="com.leo.ssh.domain.Order"/>
	<bean name="orderitem" class="com.leo.ssh.domain.Orderitem"/>
	
	<bean name="usersDao" class="com.leo.ssh.dao.impl.UsersDaoImpl">
	  <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	  </property>
	</bean>
	<bean name="usersBiz" class="com.leo.ssh.biz.impl.UsersBizImpl">
	   <property name="usersDao">
	     <ref bean="usersDao"/>
	   </property>
	</bean>
	<bean name="orderitemDao" class="com.leo.ssh.dao.impl.OrderitemDaoImpl">
	   <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	   </property>
	</bean>
	<bean name="orderitemBiz" class="com.leo.ssh.biz.impl.OrderitemBizImpl">
	   <property name="orderitemDao">
	     <ref bean="orderitemDao"/>
	   </property>
	</bean>
	<bean name="orderDao" class="com.leo.ssh.dao.impl.OrderDaoImpl">
	   <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	   </property>
	</bean>
	<bean name="orderBiz" class="com.leo.ssh.biz.impl.OrderBizImpl">
	   <property name="orderDao">
	     <ref bean="orderDao"/>
	   </property>
	</bean>
	<bean name="adminsLoginDao" class="com.leo.ssh.dao.impl.AdminsLoginDaoImpl">
	   <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	   </property>
	</bean>
	<bean name="adminsLoginBiz" class="com.leo.ssh.biz.impl.AdminsLoginBizImpl">
	   <property name="adminsLoginDao">
	     <ref bean="adminsLoginDao"/>
	   </property>
	</bean>
	<bean name="usersLoginDao" class="com.leo.ssh.dao.impl.UsersLoginDaoImpl">
	   <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	   </property>
	</bean>
	<bean name="usersLoginBiz" class="com.leo.ssh.biz.impl.UsersLoginBizImpl">
	   <property name="usersLoginDao">
	     <ref bean="usersLoginDao"/>
	   </property>
	</bean>
	<bean name="commodityclassDao" class="com.leo.ssh.dao.impl.CommodityclassDaoImpl">
	 <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	    </property>
	</bean>
	<bean name="commodityclassBiz" class="com.leo.ssh.biz.impl.CommodityclassBizImpl">
	   <property name="commodityclassDao">
	     <ref bean="commodityclassDao"/>
	   </property>
	</bean>
	<bean name="bigcommodityclassDao" class="com.leo.ssh.dao.impl.BigcommodityclassDaoImpl">
	   <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	    </property>
	</bean>
	<bean name="bigcommodityclassBiz" class="com.leo.ssh.biz.impl.BigcommodityclassBizImpl">
	   <property name="bigcommodityclassDao">
	     <ref bean="bigcommodityclassDao"/>
	   </property>
	</bean>
	<bean name="commodityDao" class="com.leo.ssh.dao.impl.CommodityDaoImpl">
	 <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	    </property>
	</bean>
	<bean name="commodityBiz" class="com.leo.ssh.biz.impl.CommodityBizImpl">
	   <property name="commodityDao">
	     <ref bean="commodityDao"/>
	   </property>
	</bean>
	<bean name="adminsDao" class="com.leo.ssh.dao.impl.AdminsDaoImpl">
	  <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	  </property>
	</bean>
	<bean name="adminsBiz" class="com.leo.ssh.biz.impl.AdminsBizImpl">
	   <property name="adminsDao">
	     <ref bean="adminsDao"/>
	   </property>
	</bean>
	<bean name="adminRolesDao" class="com.leo.ssh.dao.impl.AdminRolesDaoImpl">
	   <property name="sessionFactory">
	       <!-- ref中的“sessionFactory”是spring托管的sessionFactory -->
	       <ref bean="sessionFactory"/>
	  </property>
	</bean>
	<bean name="adminRolesBiz" class="com.leo.ssh.biz.impl.AdminRolesBizImpl">
	   <property name="adminRolesDao">
	      <ref bean="adminRolesDao"/>
	   </property>
	</bean>
	<bean name="commodityAction" class="com.leo.ssh.action.CommodityAction" scope="prototype">
	  <property name="commodity">
	     <ref bean="commodity"/>
	  </property>
	  <property name="commodityBiz">
	     <ref bean="commodityBiz"/>
	  </property>
	   <property name="commodityclassBiz">
	     <ref bean="commodityclassBiz"/>
	  </property>
	   <property name="bigcommodityclassBiz">
	     <ref bean="bigcommodityclassBiz"/>
	  </property>
	</bean>
	<bean name="commodityclassAction" class="com.leo.ssh.action.CommodityclassAction" scope="prototype">
	  <property name="commodityclass">
	     <ref bean="commodityclass"/>
	  </property>
	  <property name="commodityclassBiz">
	     <ref bean="commodityclassBiz"/>
	  </property>
	  <property name="bigcommodityclassBiz">
	     <ref bean="bigcommodityclassBiz"/>
	  </property>
	</bean>
	<bean name="bigcommodityclassAction" class="com.leo.ssh.action.BigcommodityclassAction" scope="prototype">
	  <property name="bigcommodityclass">
	     <ref bean="bigcommodityclass"/>
	  </property>
	  <property name="bigcommodityclassBiz">
	     <ref bean="bigcommodityclassBiz"/>
	  </property>
	</bean>
	<bean name="adminsAction" class="com.leo.ssh.action.AdminsAction" scope="prototype">
	   <property name="admins">
	      <ref bean="admins"/>
	   </property>
	   <property name="adminsBiz">
	     <ref bean="adminsBiz"/>
	   </property>
	   <property name="adminRolesBiz">
	     <ref bean="adminRolesBiz"/>
	   </property>
	</bean>
	<bean name="usersAction" class="com.leo.ssh.action.UsersAction" scope="prototype">
	   <property name="users">
	      <ref bean="users"/>
	   </property>
	   <property name="usersBiz">
	     <ref bean="usersBiz"/>
	   </property>
	</bean>
	<bean name="adminRolesAction" class="com.leo.ssh.action.AdminRolesAction" scope="prototype">
	   <property name="adminroles">
	      <ref bean="adminroles"/>
	   </property>
	   <property name="adminRolesBiz">
	     <ref bean="adminRolesBiz"/>
	   </property>
	</bean>
	<bean name="adminsLoginAction" class="com.leo.ssh.action.AdminsLoginAction" scope="prototype">
	   <property name="admins">
	      <ref bean="admins"/>
	   </property>
	   <property name="adminsLoginBiz">
	     <ref bean="adminsLoginBiz"/>
	   </property>
	</bean>
	<bean name="usersLoginAction" class="com.leo.ssh.action.UsersLoginAction" scope="prototype">
	   <property name="users">
	      <ref bean="users"/>
	   </property>
	   <property name="usersLoginBiz">
	     <ref bean="usersLoginBiz"/>
	   </property>
	</bean>
	<bean name="orderAction" class="com.leo.ssh.action.OrderAction" scope="prototype">
	  
	   <property name="order">
	      <ref bean="order"/>
	   </property>
	   <property name="orderBiz">
	      <ref bean="orderBiz"/>
	   </property>
	</bean>
	<bean name="orderitemAction" class="com.leo.ssh.action.OrderitemAction" scope="prototype">
	  
	   <property name="orderitem">
	      <ref bean="orderitem"/>
	   </property>
	   <property name="orderitemBiz">
	      <ref bean="orderitemBiz"/>
	   </property>
	</bean>
</beans>